diff --git a/src/raspberrypi/picursor.h b/src/raspberrypi/picursor.h
index ff54700..fa07531 100644
--- a/src/raspberrypi/picursor.h
+++ b/src/raspberrypi/picursor.h
@@ -1,82 +1,30 @@
 static uint32_t default_cursor[] = {
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
-	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,
-	0xff000000,0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
-	0xffffffff,0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,
-	0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,
-	0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xffffffff,0xff000000,0xff000000,0x00000000,
-	0x00000000,0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,
-	0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,
-	0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,
-	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-	0x00000000,0xff000000,0xff000000,0xff000000,0xff000000,0x00000000,
-	0x00000000,0x00000000
+	0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,
+	0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000,
+	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,
+	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xff000000,0xffffffff,0xffffffff,0xff000000,0x00000000,0x00000000,0x00000000,
+	0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0xff000000,0xff000000,0xff000000,0x00000000,0x00000000,0x00000000
 };
diff --git a/src/raspberrypi/pidisplay.c b/src/raspberrypi/pidisplay.c
index 91982fb..40e909a 100644
--- a/src/raspberrypi/pidisplay.c
+++ b/src/raspberrypi/pidisplay.c
@@ -68,58 +68,89 @@ static void delete_cursor_data(ALLEGRO_DISPLAY_RASPBERRYPI *d)
 
 static void show_cursor(ALLEGRO_DISPLAY_RASPBERRYPI *d)
 {
-   if (d->cursor_data == NULL || cursor_added) {
+   if (d->cursor_data == NULL) {
       return;
    }
 
    int width = d->cursor_width;
    int height = d->cursor_height;
 
-   uint32_t unused;
-   cursor_resource = vc_dispmanx_resource_create(VC_IMAGE_ARGB8888, width, height, &unused);
-
-   VC_RECT_T r;
-   r.x = 0;
-   r.y = 0;
-   r.width = width;
-   r.height = height;
+   if (cursor_added == false) {
+      uint32_t unused;
+      cursor_resource = vc_dispmanx_resource_create(VC_IMAGE_ARGB8888, width, height, &unused);
    
-   int dpitch = pot(sizeof(uint32_t) * width);
-
-   dispman_update = vc_dispmanx_update_start(0);
-   vc_dispmanx_resource_write_data(cursor_resource, VC_IMAGE_ARGB8888, dpitch, d->cursor_data, &r);
-   vc_dispmanx_update_submit_sync(dispman_update);
-
-   ALLEGRO_MOUSE_STATE state;
-   al_get_mouse_state(&state);
-
-   dst_rect.x = state.x+d->cursor_offset_x;
-   dst_rect.y = state.y+d->cursor_offset_y;
-   dst_rect.width = width;
-   dst_rect.height = height;
-   src_rect.x = 0;
-   src_rect.y = 0;
-   src_rect.width = width << 16;
-   src_rect.height = height << 16;
-
-   dispman_update = vc_dispmanx_update_start(0);
-
-   cursor_element = vc_dispmanx_element_add(
-      dispman_update,
-      dispman_display,
-      0/*layer*/,
-      &dst_rect,
-      cursor_resource,
-      &src_rect,
-      DISPMANX_PROTECTION_NONE,
-      0 /*alpha*/,
-      0/*clamp*/,
-      0/*transform*/
-   );
-
-   vc_dispmanx_update_submit_sync(dispman_update);
+      VC_RECT_T r;
+      r.x = 0;
+      r.y = 0;
+      r.width = width;
+      r.height = height;
+      
+      int dpitch = pot(sizeof(uint32_t) * width);
+   
+      dispman_update = vc_dispmanx_update_start(0);
+      vc_dispmanx_resource_write_data(cursor_resource, VC_IMAGE_ARGB8888, dpitch, d->cursor_data, &r);
+      vc_dispmanx_update_submit_sync(dispman_update);
 
-   cursor_added = true;
+      ALLEGRO_MOUSE_STATE state;
+      al_get_mouse_state(&state);
+   
+      dst_rect.x = state.x+d->cursor_offset_x;
+      dst_rect.y = state.y+d->cursor_offset_y;
+      dst_rect.width = width;
+      dst_rect.height = height;
+      src_rect.x = 0;
+      src_rect.y = 0;
+      src_rect.width = width << 16;
+      src_rect.height = height << 16;
+   
+      dispman_update = vc_dispmanx_update_start(0);
+   
+      cursor_element = vc_dispmanx_element_add(
+         dispman_update,
+         dispman_display,
+         0/*layer*/,
+         &dst_rect,
+         cursor_resource,
+         &src_rect,
+         DISPMANX_PROTECTION_NONE,
+         0 /*alpha*/,
+         0/*clamp*/,
+         0/*transform*/
+      );
+   
+      vc_dispmanx_update_submit_sync(dispman_update);
+      
+      cursor_added = true;
+   }
+   else {
+      ALLEGRO_DISPLAY *disp = (ALLEGRO_DISPLAY *)d;
+      VC_RECT_T src, dst;
+      src.x = 0;
+      src.y = 0;
+      src.width = d->cursor_width << 16;
+      src.height = d->cursor_height << 16;
+      ALLEGRO_MOUSE_STATE st;
+      al_get_mouse_state(&st);
+      st.x = (st.x+0.5) * d->screen_width / disp->w;
+      st.y = (st.y+0.5) * d->screen_height / disp->h;
+      dst.x = st.x+d->cursor_offset_x;
+      dst.y = st.y+d->cursor_offset_y;
+      dst.width = d->cursor_width;
+      dst.height = d->cursor_height;
+         dispman_update = vc_dispmanx_update_start(0);
+      vc_dispmanx_element_change_attributes(
+         dispman_update,
+         cursor_element,
+         0,
+         0,
+         0,
+         &dst,
+         &src,
+         0,
+         0
+      );
+      vc_dispmanx_update_submit_sync(dispman_update);
+   }
 }
 
 static void hide_cursor(ALLEGRO_DISPLAY_RASPBERRYPI *d)
@@ -580,8 +611,11 @@ static bool raspberrypi_wait_for_vsync(ALLEGRO_DISPLAY *display)
 
 void raspberrypi_flip_display(ALLEGRO_DISPLAY *disp)
 {
-   (void)disp;
    eglSwapBuffers(egl_display, egl_window);
+   
+   if (cursor_added) {
+      show_cursor((ALLEGRO_DISPLAY_RASPBERRYPI *)disp);
+   }
 }
 
 static void raspberrypi_update_display_region(ALLEGRO_DISPLAY *d, int x, int y,
